---
title: AI Crypto Arbitrage System
emoji: ü§ñ
colorFrom: blue
colorTo: green
sdk: gradio
sdk_version: 5.45.0
app_file: app.py
pinned: false
---

# ü§ñ AI Crypto Arbitrage System

Advanced multi-strategy cryptocurrency arbitrage detection system powered by AI and Bellman-Ford algorithms.

## üåü Features

### üéØ 5 Arbitrage Strategies
1. **DEX/CEX Arbitrage** - Price differences between decentralized and centralized exchanges
2. **Cross-Exchange Arbitrage** - Price differences across multiple CEX exchanges  
3. **Triangular Arbitrage** - Three-currency cycles within single exchanges
4. **Wrapped Tokens Arbitrage** - Native vs wrapped token price discrepancies
5. **Statistical Arbitrage** - AI-powered correlation and anomaly detection

### üß† AI-Powered Analysis
- **Opportunity Ranking** - AI scores and ranks all detected opportunities
- **Risk Assessment** - Intelligent risk scoring and confidence analysis
- **Timing Optimization** - AI determines optimal execution timing
- **Market Insights** - Real-time market condition analysis

### ‚ö° Advanced Detection
- **Bellman-Ford Algorithm** - Detects complex multi-hop arbitrage cycles
- **Real-time Monitoring** - Live price feeds from 5+ exchanges and DEX protocols
- **Statistical Analysis** - Historical correlation and deviation detection

## üèóÔ∏è Architecture

```
AI Arbitrage System
‚îú‚îÄ‚îÄ ü§ñ AI Model (DialoGPT-medium)
‚îú‚îÄ‚îÄ üìä Data Engine (CCXT + Web3)
‚îú‚îÄ‚îÄ üï∏Ô∏è Graph Builder (NetworkX)
‚îú‚îÄ‚îÄ üîç Bellman-Ford Detector
‚îú‚îÄ‚îÄ üìà 5 Strategy Modules
‚îî‚îÄ‚îÄ üéÆ Gradio Interface
```

## üìä Supported Exchanges & How Connections Are Made

This project connects to exchanges and DEX protocols using two complementary approaches: CCXT clients for unified CEX access, and direct REST / Web3 fallbacks for verification or when CCXT calls fail.

### Centralized Exchanges (CEX)
- Connected via CCXT clients by default: Binance, Kraken, Coinbase Pro, KuCoin (see `core/data_engine.py`).
- CCXT provides unified fetch_ticker / fetch_ohlcv APIs; the project initializes CCXT exchange instances with rate-limiting enabled.
- If a CCXT call fails, the system attempts a REST fallback using patterns defined in `utils/config.py` -> `EXCHANGE_ENDPOINTS`.
- Some exchanges are marked with `prefer_ccxt` in `EXCHANGE_ENDPOINTS` (e.g., Bitfinex) and will skip raw REST checks.
- You can override any configured base URL via environment variables like `EXCHANGE_ENDPOINT_BINANCE_BASE_URL`.

Default CEXs configured in code:
- binance
- kraken
- coinbase
- kucoin
- bitfinex (prefer_ccxt: may avoid REST fallback)
- bybit
- okx
- gateio

Note: `EXCHANGE_ENDPOINTS` also includes aggregators (coingecko, coinmarketcap). The `DataEngine` initializes CCXT clients where available and falls back to REST parsing; CCXT initialization is performed defensively so tests/CI do not fail when some exchange classes are missing.

### Decentralized Protocols (DEX)
- DEX price data is obtained via Web3 (on-chain RPC) when available, otherwise simulated/demo data is used.
- Supported protocols: Uniswap V3, SushiSwap, PancakeSwap.
- Web3 RPC connection uses a public provider for demo purposes; set your own RPC in code or environment for real queries.
- DEX price collection in `core/data_engine.py` uses either direct on-chain queries (if web3 present) or simulated generators to keep the demo safe.

### Fallbacks, Simulation & Demo Mode
- Demo-safe behavior: when Web3 or an exchange call is unavailable, the DataEngine will generate simulated/fallback tickers so the system remains functional for testing.
- A synthetic exchange can be injected for demo arbitrage scenarios when `DEBUG_DEMO_INJECT_SYNTHETIC` in `utils/config.py` is True (useful for end-to-end tests).
- REST fallback parsing is best-effort and uses `EXCHANGE_ENDPOINTS` patterns and optional `alternate_paths` to locate public ticker endpoints.

See also:
- Implementation: [`core/data_engine.py`](core/data_engine.py:1)
- REST endpoint configuration: [`utils/config.py`](utils/config.py:54)
- Endpoint verifier tool: [`tools/verify_endpoints.py`](tools/verify_endpoints.py:1)

## üöÄ Quick Start

1. **Launch the App** - Click the "AI Crypto Arbitrage System" interface
2. **Select Strategies** - Choose which arbitrage strategies to enable
3. **Pick Trading Pairs** - Select cryptocurrencies to monitor
4. **Set Thresholds** - Configure minimum profit requirements
5. **Start Scanning** - Hit "üîç Scan Opportunities" to begin

## ‚öôÔ∏è Configuration

### Strategy Settings
- **Minimum Profit**: 0.1% - 3.0%
- **Max Opportunities**: 1-20 results
- **Auto Refresh**: 30-second intervals
- **Demo Mode**: Safe simulation (recommended)

### AI Analysis
- Confidence scoring (0-1 scale)
- Risk level assessment (LOW/MEDIUM/HIGH)
- Execution time estimates
- Market condition analysis

### Exchange endpoints & verification
- Canonical REST endpoints for exchanges are defined in [`utils/config.py`](utils/config.py:54) under the `EXCHANGE_ENDPOINTS` mapping.
- You can override any exchange base URL at runtime using environment variables like `EXCHANGE_ENDPOINT_BINANCE_BASE_URL`. See the loop in [`utils/config.py`](utils/config.py:118) that applies overrides.
- CoinMarketCap requires an API key for public REST calls. Provide it via `COINMARKETCAP_API_KEY` or `CMC_API_KEY` environment variable to enable CMC verification/fetching.

### Enabling and using all supported exchanges

To let the application use all 8 CEX + 2 aggregators reliably, follow these steps:

1. Install Python dependencies (ensure CCXT is installed so the DataEngine can use native clients when available):
   - Windows PowerShell:
   ```powershell
   .\.venv\Scripts\Activate.ps1
   pip install --upgrade pip
   pip install -r requirements.txt
   pip install ccxt
   ```
   - If you prefer the latest CCXT release from GitHub:
   ```powershell
   pip install git+https://github.com/ccxt/ccxt.git
   ```

2. Provide API keys for exchanges that require them (optional for public data but required for private endpoints or some providers):
   - CoinMarketCap (required for CMC quotes/historical data):
     - Windows (cmd): `set COINMARKETCAP_API_KEY=your_key_here`
     - PowerShell: `$env:COINMARKETCAP_API_KEY = "your_key_here"`
   - Other exchanges: add API keys as environment variables or configure your secure secrets manager if you intend to enable private trading.

3. Verify CCXT client availability:
   - The DataEngine instantiates CCXT clients defensively and will skip clients not available in your environment. To ensure full CEX coverage, install CCXT and confirm the exchange id is supported by your CCXT install (e.g., `ccxt.bybit`, `ccxt.okx`, `ccxt.gateio`, `ccxt.bitfinex`).

4. Forcing REST fallback or preferring CCXT:
   - Some exchanges may be flagged `prefer_ccxt` in [`utils/config.py`](utils/config.py:54). If you want to force REST verification instead, set `prefer_ccxt` to `False` for that exchange in `EXCHANGE_ENDPOINTS`, or rely on `alternate_paths` for better REST fallbacks.

5. Run the endpoint verifier (in activated venv) to validate endpoints:
   - Windows (cmd/powershell):
     - `.venv\Scripts\Activate.ps1` (PowerShell) or `.venv\Scripts\activate` (cmd)
     - `python tools/verify_endpoints.py`
   - The verifier will prefer CCXT fetches when available, fall back to REST parsing, skip endpoints requiring API keys (CoinMarketCap), and emit `endpoint_report.json`.

6. Example env overrides:
   - Override base URLs or enable debug demo injection:
     - `set EXCHANGE_ENDPOINT_BINANCE_BASE_URL=https://api.binance.com`
     - `set DEBUG_DEMO_INJECT_SYNTHETIC=True`

Notes:
- The DataEngine will aggregate market data from CCXT clients where present and use REST endpoints defined in [`utils/config.py`](utils/config.py:54) otherwise. This hybrid approach ensures the app can utilize all listed exchanges with graceful fallbacks.
- Verify exact fee schedules and rate limits in production; the bundled config contains reasonable defaults but should be confirmed against each exchange's live documentation.
Logging in Hugging Face Spaces
- The application logs to stdout. To control verbosity set the `LOG_LEVEL` environment variable (e.g. `LOG_LEVEL=DEBUG` for development or `LOG_LEVEL=INFO` for normal operation).
- When deploying to Hugging Face Spaces, set `LOG_LEVEL=INFO` (or `DEBUG` to troubleshoot) in the Space settings to surface info/debug logs in the Space UI.
- The project uses `utils/logging_config.py` to configure an explicit stdout StreamHandler so logs appear in the Spaces console.

Verification tool
- A helper to validate configured endpoints is available at [`tools/verify_endpoints.py`](tools/verify_endpoints.py:1).
- Run the verifier inside the project's virtual environment:
  - Windows (cmd/powershell): `.venv\Scripts\python tools/verify_endpoints.py`
- The verifier will:
  - Prefer the project's REST parser in [`core/data_engine.py`](core/data_engine.py:205) when available.
  - Skip endpoints that explicitly require an API key (to avoid false negatives) ‚Äî e.g., CoinMarketCap.
  - Respect exchanges marked as `prefer_ccxt` and will avoid raw REST checks for them when configured.
  - Emit a JSON report (`endpoint_report.json`) showing per-exchange status; some exchanges may return non-200 responses (400/404/500) depending on path, params or API-key requirements.
- Results are written to `endpoint_report.json` and printed to stdout.

Tests
- A basic config test was added at [`tests/test_endpoints.py`](tests/test_endpoints.py:1) to ensure endpoint entries exist and base URLs are present.
- Run tests with pytest inside the virtual environment:
  - `.venv\Scripts\python -m pytest -q`

Notes
- Some exchanges (Bitfinex, certain Bybit endpoints) may prefer or require using ccxt clients instead of raw public REST paths; these are flagged in [`utils/config.py`](utils/config.py:91) with `prefer_ccxt` or `requires_api_key`.
- If an exchange REST path fails in verification, update the pattern in [`utils/config.py`](utils/config.py:54) or add `alternate_paths` for best-fit fallbacks.

## üõ°Ô∏è Safety Features

- **Demo Mode** - All trading is simulated by default
- **Risk Limits** - Built-in position and exposure limits
- **AI Safety** - Confidence thresholds prevent risky trades
- **Fee Calculation** - Accurate cost estimation including gas fees

## üìà Performance Metrics

The system tracks:
- Total opportunities detected
- Average profit percentages
- AI confidence scores
- Strategy performance breakdown
- Execution time estimates

## ‚ö†Ô∏è Important Notes

- **Educational Purpose**: This system is for educational and research purposes
- **Paper Trading**: Demo mode is enabled by default for safety
- **Real Trading Risk**: Live trading involves significant financial risk
- **No Guarantees**: Past performance doesn't guarantee future results

## üîß Technical Details

- **AI Model**: Microsoft DialoGPT-medium (optimized for HF Spaces)
- **Graph Algorithm**: Bellman-Ford negative cycle detection
- **Data Sources**: CCXT unified exchange API + Web3 providers
- **Update Frequency**: Real-time with 30-second refresh cycles
- **Architecture**: Fully modular and extensible design

## üìö How It Works

1. **Data Collection**: Fetches real-time prices from multiple exchanges
2. **Graph Construction**: Builds weighted directed graph of trading opportunities  
3. **Cycle Detection**: Uses Bellman-Ford to find profitable arbitrage cycles
4. **AI Analysis**: Ranks opportunities using machine learning
5. **Risk Assessment**: Calculates confidence scores and risk levels
6. **Visualization**: Presents opportunities in user-friendly dashboard

## üõ†Ô∏è Local setup & run (Windows PowerShell)

Follow these steps to run the project locally on Windows using PowerShell. These commands assume you have Python installed (3.8+ recommended).

1. Create and activate a virtual environment:

```powershell
python -m venv .venv
.\.venv\Scripts\Activate.ps1
```

2. Install dependencies:

```powershell
pip install --upgrade pip
pip install -r requirements.txt
```

3. Run a quick smoke import to verify imports:

```powershell
python -c "import app; print('imported app OK')"
```

4. Start the Gradio UI (will run a local web server):

```powershell
python app.py
```

5. Notes and tips:
- Demo mode is enabled in the UI by default ‚Äî this simulates executions and is safe for testing.
- Live market fetches use CCXT and Web3; make sure your machine has network access.
- For real trading you must configure exchange API keys and implement secure key storage (not stored in repo).
- If you want to run a quick live scan from the command line, use the helper script:

```powershell
python .\tools\run_live_scan.py
```

If you run into missing-dependency errors, re-check the `requirements.txt` and install any missing packages.

## ü§ù Contributing

This is an open-source educational project. Feel free to:
- Report issues
- Suggest improvements  
- Fork and experiment
- Share your results

---

**‚ö†Ô∏è Disclaimer**: This software is for educational purposes only. Cryptocurrency trading carries significant financial risk. Never invest more than you can afford to lose.
